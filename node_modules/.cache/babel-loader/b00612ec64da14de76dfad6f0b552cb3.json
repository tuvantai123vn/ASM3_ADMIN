{"ast":null,"code":"import { useContext, useLayoutEffect, useState, useMemo } from 'react';\nimport CookiesContext from './CookiesContext';\nimport { isInBrowser } from './utils';\nexport default function useCookies(dependencies) {\n  const cookies = useContext(CookiesContext);\n\n  if (!cookies) {\n    throw new Error('Missing <CookiesProvider>');\n  }\n\n  const [allCookies, setCookies] = useState(() => cookies.getAll());\n\n  if (isInBrowser()) {\n    useLayoutEffect(() => {\n      function onChange() {\n        const newCookies = cookies.getAll({\n          doNotUpdate: true\n        });\n\n        if (shouldUpdate(dependencies || null, newCookies, allCookies)) {\n          setCookies(newCookies);\n        }\n      }\n\n      cookies.addChangeListener(onChange);\n      return () => {\n        cookies.removeChangeListener(onChange);\n      };\n    }, [cookies, allCookies]);\n  }\n\n  const setCookie = useMemo(() => cookies.set.bind(cookies), [cookies]);\n  const removeCookie = useMemo(() => cookies.remove.bind(cookies), [cookies]);\n  const updateCookies = useMemo(() => cookies.update.bind(cookies), [cookies]);\n  return [allCookies, setCookie, removeCookie, updateCookies];\n}\n\nfunction shouldUpdate(dependencies, newCookies, oldCookies) {\n  if (!dependencies) {\n    return true;\n  }\n\n  for (let dependency of dependencies) {\n    if (newCookies[dependency] !== oldCookies[dependency]) {\n      return true;\n    }\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/Volumes/document/GitHub/ASM3/Frontend Assignment 03/admin_shop/node_modules/react-cookie/es6/useCookies.js"],"names":["useContext","useLayoutEffect","useState","useMemo","CookiesContext","isInBrowser","useCookies","dependencies","cookies","Error","allCookies","setCookies","getAll","onChange","newCookies","doNotUpdate","shouldUpdate","addChangeListener","removeChangeListener","setCookie","set","bind","removeCookie","remove","updateCookies","update","oldCookies","dependency"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,eAArB,EAAsCC,QAAtC,EAAgDC,OAAhD,QAA+D,OAA/D;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAASC,WAAT,QAA4B,SAA5B;AACA,eAAe,SAASC,UAAT,CAAoBC,YAApB,EAAkC;AAC7C,QAAMC,OAAO,GAAGR,UAAU,CAACI,cAAD,CAA1B;;AACA,MAAI,CAACI,OAAL,EAAc;AACV,UAAM,IAAIC,KAAJ,CAAU,2BAAV,CAAN;AACH;;AACD,QAAM,CAACC,UAAD,EAAaC,UAAb,IAA2BT,QAAQ,CAAC,MAAMM,OAAO,CAACI,MAAR,EAAP,CAAzC;;AACA,MAAIP,WAAW,EAAf,EAAmB;AACfJ,IAAAA,eAAe,CAAC,MAAM;AAClB,eAASY,QAAT,GAAoB;AAChB,cAAMC,UAAU,GAAGN,OAAO,CAACI,MAAR,CAAe;AAC9BG,UAAAA,WAAW,EAAE;AADiB,SAAf,CAAnB;;AAGA,YAAIC,YAAY,CAACT,YAAY,IAAI,IAAjB,EAAuBO,UAAvB,EAAmCJ,UAAnC,CAAhB,EAAgE;AAC5DC,UAAAA,UAAU,CAACG,UAAD,CAAV;AACH;AACJ;;AACDN,MAAAA,OAAO,CAACS,iBAAR,CAA0BJ,QAA1B;AACA,aAAO,MAAM;AACTL,QAAAA,OAAO,CAACU,oBAAR,CAA6BL,QAA7B;AACH,OAFD;AAGH,KAbc,EAaZ,CAACL,OAAD,EAAUE,UAAV,CAbY,CAAf;AAcH;;AACD,QAAMS,SAAS,GAAGhB,OAAO,CAAC,MAAMK,OAAO,CAACY,GAAR,CAAYC,IAAZ,CAAiBb,OAAjB,CAAP,EAAkC,CAACA,OAAD,CAAlC,CAAzB;AACA,QAAMc,YAAY,GAAGnB,OAAO,CAAC,MAAMK,OAAO,CAACe,MAAR,CAAeF,IAAf,CAAoBb,OAApB,CAAP,EAAqC,CAACA,OAAD,CAArC,CAA5B;AACA,QAAMgB,aAAa,GAAGrB,OAAO,CAAC,MAAMK,OAAO,CAACiB,MAAR,CAAeJ,IAAf,CAAoBb,OAApB,CAAP,EAAqC,CAACA,OAAD,CAArC,CAA7B;AACA,SAAO,CAACE,UAAD,EAAaS,SAAb,EAAwBG,YAAxB,EAAsCE,aAAtC,CAAP;AACH;;AACD,SAASR,YAAT,CAAsBT,YAAtB,EAAoCO,UAApC,EAAgDY,UAAhD,EAA4D;AACxD,MAAI,CAACnB,YAAL,EAAmB;AACf,WAAO,IAAP;AACH;;AACD,OAAK,IAAIoB,UAAT,IAAuBpB,YAAvB,EAAqC;AACjC,QAAIO,UAAU,CAACa,UAAD,CAAV,KAA2BD,UAAU,CAACC,UAAD,CAAzC,EAAuD;AACnD,aAAO,IAAP;AACH;AACJ;;AACD,SAAO,KAAP;AACH","sourcesContent":["import { useContext, useLayoutEffect, useState, useMemo } from 'react';\nimport CookiesContext from './CookiesContext';\nimport { isInBrowser } from './utils';\nexport default function useCookies(dependencies) {\n    const cookies = useContext(CookiesContext);\n    if (!cookies) {\n        throw new Error('Missing <CookiesProvider>');\n    }\n    const [allCookies, setCookies] = useState(() => cookies.getAll());\n    if (isInBrowser()) {\n        useLayoutEffect(() => {\n            function onChange() {\n                const newCookies = cookies.getAll({\n                    doNotUpdate: true,\n                });\n                if (shouldUpdate(dependencies || null, newCookies, allCookies)) {\n                    setCookies(newCookies);\n                }\n            }\n            cookies.addChangeListener(onChange);\n            return () => {\n                cookies.removeChangeListener(onChange);\n            };\n        }, [cookies, allCookies]);\n    }\n    const setCookie = useMemo(() => cookies.set.bind(cookies), [cookies]);\n    const removeCookie = useMemo(() => cookies.remove.bind(cookies), [cookies]);\n    const updateCookies = useMemo(() => cookies.update.bind(cookies), [cookies]);\n    return [allCookies, setCookie, removeCookie, updateCookies];\n}\nfunction shouldUpdate(dependencies, newCookies, oldCookies) {\n    if (!dependencies) {\n        return true;\n    }\n    for (let dependency of dependencies) {\n        if (newCookies[dependency] !== oldCookies[dependency]) {\n            return true;\n        }\n    }\n    return false;\n}\n"]},"metadata":{},"sourceType":"module"}